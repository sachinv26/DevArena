{"ast":null,"code":"// In production, we register a service worker to serve assets from local cache.\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\nvar isLocalhost=Boolean(window.location.hostname==='localhost'||// [::1] is the IPv6 localhost address.\nwindow.location.hostname==='[::1]'||// 127.0.0.1/8 is considered localhost for IPv4.\nwindow.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));export default function register(){if(process.env.NODE_ENV==='production'&&'serviceWorker'in navigator){// The URL constructor is available in all browsers that support SW.\nvar publicUrl=new URL(process.env.PUBLIC_URL,window.location);if(publicUrl.origin!==window.location.origin){// Our service worker won't work if PUBLIC_URL is on a different origin\n// from what our page is served on. This might happen if a CDN is used to\n// serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\nreturn;}window.addEventListener('load',function(){var swUrl=\"\".concat(process.env.PUBLIC_URL,\"/service-worker.js\");if(isLocalhost){// This is running on localhost. Lets check if a service worker still exists or not.\ncheckValidServiceWorker(swUrl);// Add some additional logging to localhost, pointing developers to the\n// service worker/PWA documentation.\nnavigator.serviceWorker.ready.then(function(){console.log('This web app is being served cache-first by a service '+'worker. To learn more, visit https://goo.gl/SC7cgQ');});}else{// Is not local host. Just register service worker\nregisterValidSW(swUrl);}});}}function registerValidSW(swUrl){navigator.serviceWorker.register(swUrl).then(function(registration){registration.onupdatefound=function(){var installingWorker=registration.installing;installingWorker.onstatechange=function(){if(installingWorker.state==='installed'){if(navigator.serviceWorker.controller){// At this point, the old content will have been purged and\n// the fresh content will have been added to the cache.\n// It's the perfect time to display a \"New content is\n// available; please refresh.\" message in your web app.\nconsole.log('New content is available; please refresh.');}else{// At this point, everything has been precached.\n// It's the perfect time to display a\n// \"Content is cached for offline use.\" message.\nconsole.log('Content is cached for offline use.');}}};};}).catch(function(error){console.error('Error during service worker registration:',error);});}function checkValidServiceWorker(swUrl){// Check if the service worker can be found. If it can't reload the page.\nfetch(swUrl).then(function(response){// Ensure service worker exists, and that we really are getting a JS file.\nif(response.status===404||response.headers.get('content-type').indexOf('javascript')===-1){// No service worker found. Probably a different app. Reload the page.\nnavigator.serviceWorker.ready.then(function(registration){registration.unregister().then(function(){window.location.reload();});});}else{// Service worker found. Proceed as normal.\nregisterValidSW(swUrl);}}).catch(function(){console.log('No internet connection found. App is running in offline mode.');});}export function unregister(){if('serviceWorker'in navigator){navigator.serviceWorker.ready.then(function(registration){registration.unregister();});}}","map":{"version":3,"names":["isLocalhost","Boolean","window","location","hostname","match","register","process","env","NODE_ENV","navigator","publicUrl","URL","PUBLIC_URL","origin","addEventListener","swUrl","concat","checkValidServiceWorker","serviceWorker","ready","then","console","log","registerValidSW","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","catch","error","fetch","response","status","headers","get","indexOf","unregister","reload"],"sources":["/Users/sachin/DevArena/client/src/registerServiceWorker.js"],"sourcesContent":["// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Lets check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://goo.gl/SC7cgQ'\n                    );\n                });\n            } else {\n                // Is not local host. Just register service worker\n                registerValidSW(swUrl);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the old content will have been purged and\n                            // the fresh content will have been added to the cache.\n                            // It's the perfect time to display a \"New content is\n                            // available; please refresh.\" message in your web app.\n                            console.log('New content is available; please refresh.');\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            if (\n                response.status === 404 ||\n                response.headers.get('content-type').indexOf('javascript') === -1\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}