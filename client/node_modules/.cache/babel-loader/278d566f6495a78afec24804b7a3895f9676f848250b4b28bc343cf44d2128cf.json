{"ast":null,"code":"// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nvar isLocalhost = Boolean(window.location.hostname === 'localhost' ||\n// [::1] is the IPv6 localhost address.\nwindow.location.hostname === '[::1]' ||\n// 127.0.0.1/8 is considered localhost for IPv4.\nwindow.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    var publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n    window.addEventListener('load', function () {\n      var swUrl = \"\".concat(process.env.PUBLIC_URL, \"/service-worker.js\");\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(function () {\n          console.log('This web app is being served cache-first by a service ' + 'worker. To learn more, visit https://goo.gl/SC7cgQ');\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker.register(swUrl).then(function (registration) {\n    registration.onupdatefound = function () {\n      var installingWorker = registration.installing;\n      installingWorker.onstatechange = function () {\n        if (installingWorker.state === 'installed') {\n          if (navigator.serviceWorker.controller) {\n            // At this point, the old content will have been purged and\n            // the fresh content will have been added to the cache.\n            // It's the perfect time to display a \"New content is\n            // available; please refresh.\" message in your web app.\n            console.log('New content is available; please refresh.');\n          } else {\n            // At this point, everything has been precached.\n            // It's the perfect time to display a\n            // \"Content is cached for offline use.\" message.\n            console.log('Content is cached for offline use.');\n          }\n        }\n      };\n    };\n  }).catch(function (error) {\n    console.error('Error during service worker registration:', error);\n  });\n}\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl).then(function (response) {\n    // Ensure service worker exists, and that we really are getting a JS file.\n    if (response.status === 404 || response.headers.get('content-type').indexOf('javascript') === -1) {\n      // No service worker found. Probably a different app. Reload the page.\n      navigator.serviceWorker.ready.then(function (registration) {\n        registration.unregister().then(function () {\n          window.location.reload();\n        });\n      });\n    } else {\n      // Service worker found. Proceed as normal.\n      registerValidSW(swUrl);\n    }\n  }).catch(function () {\n    console.log('No internet connection found. App is running in offline mode.');\n  });\n}\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(function (registration) {\n      registration.unregister();\n    });\n  }\n}","map":{"version":3,"names":["isLocalhost","Boolean","window","location","hostname","match","register","process","env","NODE_ENV","navigator","publicUrl","URL","PUBLIC_URL","origin","addEventListener","swUrl","concat","checkValidServiceWorker","serviceWorker","ready","then","console","log","registerValidSW","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","catch","error","fetch","response","status","headers","get","indexOf","unregister","reload"],"sources":["/Users/sachin/DevArena/client/src/registerServiceWorker.js"],"sourcesContent":["// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Lets check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://goo.gl/SC7cgQ'\n                    );\n                });\n            } else {\n                // Is not local host. Just register service worker\n                registerValidSW(swUrl);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the old content will have been purged and\n                            // the fresh content will have been added to the cache.\n                            // It's the perfect time to display a \"New content is\n                            // available; please refresh.\" message in your web app.\n                            console.log('New content is available; please refresh.');\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            if (\n                response.status === 404 ||\n                response.headers.get('content-type').indexOf('javascript') === -1\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}