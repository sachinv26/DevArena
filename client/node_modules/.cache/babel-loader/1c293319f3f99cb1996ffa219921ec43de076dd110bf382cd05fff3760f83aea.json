{"ast":null,"code":"import axios from 'axios';\nimport setAuthToken from '../utils/setAuthToken';\nimport jwt_decode from 'jwt-decode';\nimport { GET_ERRORS, SET_CURRENT_USER } from './types';\n\n// registerUser Action Creator\n// We want to wait for the response from the server and then dispatch the action\n// Redux thunk allows us to use dispatch inside an action creator\nexport var registerUser = function registerUser(userData, history) {\n  return function (dispatch) {\n    axios.post('/api/users/register', userData).then(function () {\n      return history.push('/login');\n    }).catch(function (err) {\n      return dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      });\n    });\n  };\n};\n\n// Login - Get User Token\nexport var loginUser = function loginUser(userData) {\n  return function (dispatch) {\n    axios.post('/api/users/login', userData).then(function (res) {\n      // Save to localStorage\n      var token = res.data.token;\n      // Set token to localStorage\n      localStorage.setItem('jwtToken', token);\n      // Set token to Auth header\n      setAuthToken(token);\n      // Decode token to get user data\n      var decoded = jwt_decode(token);\n      // Set current user\n      dispatch(setCurrentUser(decoded));\n    }).catch(function (err) {\n      dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      });\n    });\n  };\n};\n\n// Set logged in user\nexport var setCurrentUser = function setCurrentUser(decoded) {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n};\n\n// Log user out\nexport var logoutUser = function logoutUser() {\n  return function (dispatch) {\n    // Remove token from localStorage\n    localStorage.removeItem('jwtToken');\n    // Remove auth header for future requests\n    setAuthToken(false);\n    // Set current user to {} which will set isAuthenticated to false\n    dispatch(setCurrentUser({}));\n  };\n};","map":{"version":3,"names":["axios","setAuthToken","jwt_decode","GET_ERRORS","SET_CURRENT_USER","registerUser","userData","history","dispatch","post","then","push","catch","err","type","payload","response","data","loginUser","res","token","localStorage","setItem","decoded","setCurrentUser","logoutUser","removeItem"],"sources":["/Users/sachin/DevArena/client/src/actions/authActions.js"],"sourcesContent":["import axios from 'axios';\nimport setAuthToken from '../utils/setAuthToken';\nimport jwt_decode from 'jwt-decode';\nimport { GET_ERRORS, SET_CURRENT_USER } from './types';\n\n// registerUser Action Creator\n// We want to wait for the response from the server and then dispatch the action\n// Redux thunk allows us to use dispatch inside an action creator\nexport const registerUser = (userData, history) => dispatch => {\n    axios\n        .post('/api/users/register', userData)\n        .then(() => history.push('/login'))\n        .catch(err =>\n            dispatch({\n                type: GET_ERRORS,\n                payload: err.response.data\n            })\n        );\n};\n\n// Login - Get User Token\nexport const loginUser = userData => dispatch => {\n    axios\n        .post('/api/users/login', userData)\n        .then(res => {\n            // Save to localStorage\n            const { token } = res.data;\n            // Set token to localStorage\n            localStorage.setItem('jwtToken', token);\n            // Set token to Auth header\n            setAuthToken(token);\n            // Decode token to get user data\n            const decoded = jwt_decode(token);\n            // Set current user\n            dispatch(setCurrentUser(decoded));\n        })\n        .catch(err => {\n            dispatch({\n                type: GET_ERRORS,\n                payload: err.response.data\n            });\n        });\n};\n\n// Set logged in user\nexport const setCurrentUser = decoded => {\n    return {\n        type: SET_CURRENT_USER,\n        payload: decoded\n    };\n};\n\n// Log user out\nexport const logoutUser = () => dispatch => {\n    // Remove token from localStorage\n    localStorage.removeItem('jwtToken');\n    // Remove auth header for future requests\n    setAuthToken(false);\n    // Set current user to {} which will set isAuthenticated to false\n    dispatch(setCurrentUser({}));\n};\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,YAAY,MAAM,uBAAuB;AAChD,OAAOC,UAAU,MAAM,YAAY;AACnC,SAASC,UAAU,EAAEC,gBAAgB,QAAQ,SAAS;;AAEtD;AACA;AACA;AACA,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAYA,CAAIC,QAAQ,EAAEC,OAAO;EAAA,OAAK,UAAAC,QAAQ,EAAI;IAC3DR,KAAK,CACAS,IAAI,CAAC,qBAAqB,EAAEH,QAAQ,CAAC,CACrCI,IAAI,CAAC;MAAA,OAAMH,OAAO,CAACI,IAAI,CAAC,QAAQ,CAAC;IAAA,EAAC,CAClCC,KAAK,CAAC,UAAAC,GAAG;MAAA,OACNL,QAAQ,CAAC;QACLM,IAAI,EAAEX,UAAU;QAChBY,OAAO,EAAEF,GAAG,CAACG,QAAQ,CAACC;MAC1B,CAAC,CAAC;IAAA,CACN,CAAC;EACT,CAAC;AAAA;;AAED;AACA,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAASA,CAAGZ,QAAQ;EAAA,OAAI,UAAAE,QAAQ,EAAI;IAC7CR,KAAK,CACAS,IAAI,CAAC,kBAAkB,EAAEH,QAAQ,CAAC,CAClCI,IAAI,CAAC,UAAAS,GAAG,EAAI;MACT;MACA,IAAQC,KAAK,GAAKD,GAAG,CAACF,IAAI,CAAlBG,KAAK;MACb;MACAC,YAAY,CAACC,OAAO,CAAC,UAAU,EAAEF,KAAK,CAAC;MACvC;MACAnB,YAAY,CAACmB,KAAK,CAAC;MACnB;MACA,IAAMG,OAAO,GAAGrB,UAAU,CAACkB,KAAK,CAAC;MACjC;MACAZ,QAAQ,CAACgB,cAAc,CAACD,OAAO,CAAC,CAAC;IACrC,CAAC,CAAC,CACDX,KAAK,CAAC,UAAAC,GAAG,EAAI;MACVL,QAAQ,CAAC;QACLM,IAAI,EAAEX,UAAU;QAChBY,OAAO,EAAEF,GAAG,CAACG,QAAQ,CAACC;MAC1B,CAAC,CAAC;IACN,CAAC,CAAC;EACV,CAAC;AAAA;;AAED;AACA,OAAO,IAAMO,cAAc,GAAG,SAAjBA,cAAcA,CAAGD,OAAO,EAAI;EACrC,OAAO;IACHT,IAAI,EAAEV,gBAAgB;IACtBW,OAAO,EAAEQ;EACb,CAAC;AACL,CAAC;;AAED;AACA,OAAO,IAAME,UAAU,GAAG,SAAbA,UAAUA,CAAA;EAAA,OAAS,UAAAjB,QAAQ,EAAI;IACxC;IACAa,YAAY,CAACK,UAAU,CAAC,UAAU,CAAC;IACnC;IACAzB,YAAY,CAAC,KAAK,CAAC;IACnB;IACAO,QAAQ,CAACgB,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;EAChC,CAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}